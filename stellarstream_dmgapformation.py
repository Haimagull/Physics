# -*- coding: utf-8 -*-
"""stellarstream_DMgapformation_simu_o.laurens.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r38aA3hgbzTwjx3PF4gpU2VCcyvWhwMG

# Stellar stream DM gap formation, using Saturn's data for MW
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.patches import Circle
import rebound # for N body visualization
from IPython.display import Image # for GIF creation

"""## Simu parameters"""

sim = rebound.Simulation()        # define simu
sim.units = ('km', 's', 'kg')     # units for sim
sim.collision = "direct"
sim.collision_resolve = "merge"
sim.dt = 10 #s                    # define time step (in s)
sim.softening = 0.2               # smooth numerical data (small scale)
sim.gravity    = "basic"          # define gravity

sim.add("699")       # Add Saturn (MW) with its data base code 699, change other data proportionally to Saturn's data
sim.move_to_com()    # Define center of mass
sim.status()         # Display simu parameters

"""## Create particles (stellar stream, DM halo, MW(Saturn)"""

rs = 185539                           #Distance to Saturn (MW) center
#theta = np.random.uniform(0,2*np.pi)  #Initial angle
theta=np.pi/1
x = rs*np.cos(theta)/1.8                  #Initial positions, x et y
y = rs*np.sin(theta)/1.8
v=14                           #Initial velocity
sim.add(m=8e23,
        #m=1e25,
        r=198,
        x=x,
        y=y,
        z=np.random.normal(),
        vx = -v*np.sin(theta),
        vy = v*np.cos(theta),
        vz = 0.)

def powerlaw(slope, min_v, max_v):
    y = np.random.uniform()
    pow_max = pow(max_v, slope+1.)
    pow_min = pow(min_v, slope+1.)
    return pow((pow_max-pow_min)*y + pow_min, 1./(slope+1.))

particle_density = .1

print('Adding ring particles')
count = 0
while count < 2000:
    radius = 50*powerlaw(slope=-4, min_v=1, max_v=4)/1000
    mass = particle_density*4./3.*np.pi*(radius**3) #1.5499090909090908e+16
    rs = 180000
    theta = np.pi/4
    x = rs*np.cos(theta)
    y = rs*np.sin(theta)
    x += np.random.uniform(low=-1, high=1)*5000
    y += np.random.uniform(low=-1, high=1)*5000
    v = np.sqrt(6.67428e-11 * sim.particles[0].m/ (rs*1000)) / 1000 *.75
    sim.add(
        m=mass,
        r=radius,
        x=x,
        y=y,
        z=np.random.normal(),
        vx = -v*np.sin(theta),
        vy = v*np.cos(theta),
        vz = 0.)
    count += 1
print('Finished adding ring particles')

"""## Now ready to plot"""

def plotParticles(sim, k):
    fig = plt.figure(figsize=(8,8))
    ax = plt.subplot(111, aspect='equal')
    ax.set_ylabel("y / km")
    ax.set_xlabel("x / km")
    ax.set_xlim(-200000, 200000)
    ax.set_ylim(-200000, 200000)
    ax.set_aspect('equal')
    ax.ticklabel_format(axis="both", style="sci", scilimits=(0,0))
    # bg color
    ax.set_facecolor('black')
    for i, p in enumerate(sim.particles):
        if i == 0:
            fc, ec, a, r = "lightgoldenrodyellow", "None", 1, 58232 # mily way (e.i. Saturn)
        elif i == 1:
            fc, ec, a, r = "grey", "None", 1, 198*30 # DM halo (possible to change its color here)
        else:
            fc, ec, a, r = "lightskyblue", "None", 1, p.r*5000 # Stellar stream
        circ = Circle((p.x, p.y), r, facecolor=fc, edgecolor=ec, alpha=a)
        ax.add_patch(circ)
    plt.savefig('./myimages2/dynamics_'+str(k)+'.png', dpi=100)
    fig.clf()
    plt.close()

plotParticles(sim, 0)                 # plot initial setup
for i in range(40):                  # jump 40 times
    sim.integrate(sim.t + 1000)        # adds an extra 100 s to sim time
    plotParticles(sim, i+1)           # plot again

sim.save("./myimages2/myfirstsim.bin")               # this will save the last state of the particles in the sim

"""## Creating GIF"""

from PIL import Image as im
# Create frames
frames = []
imgs=[]
for i in range(40): # 40 images
	imgs.append("./myimages2/dynamics_"+str(i)+".png")
for i in imgs:
	new_frame = im.open(i)
	frames.append(new_frame)

# Save png images into GIF file looping forever
frames[0].save('png_to_gif2.gif', format='GIF',
          	append_images=frames[1:],
          	save_all=True,
          	duration=500, loop=0)
Image(filename='png_to_gif2.gif')

